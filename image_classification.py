# -*- coding: utf-8 -*-
"""image_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zvLZp-t9YbbEhuo_BrwAW_EdwJIgZtZJ
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install ipython-autotime
# %load_ext autotime



!pip install bing-image-downloader

!mkdir images

from bing_image_downloader import downloader
downloader.download("Quarter defnese formation nfl", limit=30, output_dir = "images", adult_filter_off=True)

from bing_image_downloader import downloader
downloader.download("Man to Man defnese formation nfl", limit=30, output_dir = "images", adult_filter_off=True)

from bing_image_downloader import downloader
downloader.download("Zone blitz defnese formation nfl", limit=30, output_dir = "images", adult_filter_off=True)

from bing_image_downloader import downloader
downloader.download("dime defense formation nfl", limit=30, output_dir = "images", adult_filter_off=True)

from bing_image_downloader import downloader
downloader.download("blitz defnese formation nfl", limit=30, output_dir = "images", adult_filter_off=True)

from bing_image_downloader import downloader
downloader.download("base defense nfl formation", limit=30, output_dir = "images", adult_filter_off=True)

from bing_image_downloader import downloader
downloader.download("nickel defensive formations nfl", limit=30, output_dir = "images", adult_filter_off=True)

import numpy as np

a = np.array([[1,2],[1,2]])
a.ndim

a.flatten()

import os
import matplotlib.pyplot
import numpy as np
from skimage.io import imread
from skimage.transform import resize
from matplotlib import pyplot as plt

target = []
images = []
flat_data = []

DATADIR = '/content/images'
CATEGORIES = ['base defense nfl formation', 'blitz defnese formation nfl', 'nickel defensive formations nfl',
'Man to Man defnese formation nfl','Quarter defnese formation nfl','dime defense formation nfl']

#'blitz defnese formation nfl'

for category in CATEGORIES:
  class_num = CATEGORIES.index(category)
  path = os.path.join(DATADIR,category)
  for img in os.listdir(path):
    img_array = imread(os.path.join(path,img))

    img_resized = resize(img_array,(150,150,3))
    flat_data.append(img_resized.flatten())
    images.append(img_resized)
    target.append(class_num)

flat_data = np.array(flat_data)
target = np.array(target)
images = np.array(images)

from google.colab import drive
import traceback
drive.mount('/content/drive')
print(traceback.format_exc())

len(flat_data[0])



150*150*7

target

unique,count = np.unique(target, return_counts=True)
# count1 = count+1
plt.bar(CATEGORIES,(count))

print(count1.shape)

print(CATEGORIES.shape)

print(CATEGORIES)

print(len(CATEGORIES))

print((count))

print(CATEGORIES)

from sklearn.model_selection import train_test_split
x_train,x_test, y_train, y_test = train_test_split(flat_data,target, test_size = 0.3,
                                                   random_state = 109)

from sklearn.model_selection import GridSearchCV
from sklearn import svm
param_grid = [

        {"C":[1,10,100,1000], "kernel": ["linear"]},
        {"C":[1,10,100,1000], "gamma": [0.001,0.0001],"kernel":["rbf"]},


]

svc = svm.SVC(probability=True)
clf = GridSearchCV(svc, param_grid)
clf.fit(x_train, y_train)

y_pred = clf.predict(x_test)
y_pred

y_test

from sklearn.metrics import accuracy_score, confusion_matrix

accuracy_score(y_pred, y_test)

confusion_matrix(y_pred, y_test)

import pickle
pickle.dump(clf,open("img_model.p", "wb"))

model = pickle.load(open("img_model.p", 'rb'))

flat_data = []

url = input("Enter")

img = imread(url)
img_resized = resize(img,(150,150,3))
flat_data.append(img_resized.flatten())
flat_data = np.array(flat_data)
print(img.shape)
plt.imshow(img_resized)
y_out = model.predict(flat_data)
y_out = CATEGORIES[y_out[0]]
print(f" PREDICTED OUTPUT: {y_out}")

!pip install streamlit

!pip install pyngrok





